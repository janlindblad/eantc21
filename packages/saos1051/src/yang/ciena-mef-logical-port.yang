module ciena-mef-logical-port {
    namespace "urn:ciena:params:xml:ns:yang:ciena-pn::ciena-mef-logical-port";
    prefix "mef-logical-port";
        
    import openconfig-interfaces {
          prefix "oc-if";
    }

    import ietf-yang-types {
        prefix "yt";
    }

    import ciena-mef-frame-to-cos-map {
        prefix "ftc";
    }

    import ciena-mef-cos-to-frame-map {
        prefix "ctf";
    }
    
    import ciena-mef-meter-profile {
        prefix "meter";
    }

    import ciena-mef-flood-containment-profile {
	prefix "mef-fc";
    }

    import ciena-mef-pfg-profile {
       prefix "mef-pfg";
    }

    organization
        "Ciena Corporation";
    
    contact
        "Web URL: http://www.ciena.com/
        E-mail:  yang@ciena.com
        Postal:  7035 Ridge Road
                 Hanover, Maryland 21076
                     U.S.A.
        Phone:   +1 800-921-1144
        Fax:     +1 410-694-5750";
    
    description
        "This YANG module defines Ciena's management data definition for the
         management of a Logical Port.";

    revision "2019-10-07" {
        description
            "Logical port events are now part of a list";
    }

    revision "2019-09-13" {
        description
          "Removed ingress-cos-to-queue-map leaf from logical-ports container.";
    }
    
    revision "2018-01-09" {
        description
          "10.0 Version.";
    }

/*
 * typedefs
 */
    typedef logical-port-ref {
        type leafref {
            path "/mef-logical-port:logical-ports/mef-logical-port:logical-port/mef-logical-port:name";
        }
        description
            "This type is used by the data models that needs to reference
             configured logical ports.";
    }

   typedef lp-admin-state 
   {
      type enumeration 
      {
         enum disable;
         enum enable;
      }
   }

   typedef lp-oper-state 
   {
      type enumeration 
      {
         enum up;
         enum down;
      }
   }

   typedef logical-port-event-type {
      type enumeration {
         enum operational-state {
            description
               "Logical Port operational state change (link state, error state).";
         }
         enum any {
             description
                "Any of the events in this enum";
         }
      }
      description
         "A generic event type describing the type of events/notifications triggered by logical-port.";
   }

/*
 * features
 */

/*
 * Configuration model.
 */

   grouping pfg-config {

      leaf pfg-profile {
         type mef-pfg:pfg-profile-ref;
            description
               "Reference to a Private Forwarding Group Profile.";
      }

      choice traffic-type {
         case all {
            leaf pfg-group {
               type mef-pfg:pfg-group-enum;

               description
                  "The Private-Forwarding-Group that all traffic ingressing a logical-port belongs to for the scope of a
                   Private-Forwarding-Group-Profile.";
            }
         }
         case subset {
            leaf broadcast-pfg-group {
               type mef-pfg:pfg-group-enum;

               description
                  "The Private-Forwarding-Group that the broadcast traffic ingressing a logical-port belongs to for the scope of a
                   Private-Forwarding-Group-Profile.";
            }

            leaf unknown-unicast-pfg-group {
               type mef-pfg:pfg-group-enum;

               description
                  "The Private-Forwarding-Group that the unknown-unicast traffic ingressing a logical-port belongs to for the scope of a
                   Private-Forwarding-Group-Profile.";
            }

            leaf unknown-multicast-pfg-group {
               type mef-pfg:pfg-group-enum;

               description
                  "The Private-Forwarding-Group that the unknown-multicast traffic ingressing a logical-port belongs to for the scope of a
                   Private-Forwarding-Group-Profile.";
            }

            leaf known-multicast-pfg-group {
               type mef-pfg:pfg-group-enum;

               description
                  "The Private-Forwarding-Group that the known-multicast traffic ingressing a logical-port belongs to for the scope of a
                   Private-Forwarding-Group-Profile.";
            }

            leaf known-unicast-pfg-group {
               type mef-pfg:pfg-group-enum;

               description
                  "The Private-Forwarding-Group that the known-unicast traffic ingressing a logical-port belongs to for the scope of a
                   Private-Forwarding-Group-Profile.";
            }
         }
      }
   }

    container logical-ports {
        
        list logical-port {
            key "name";
            
            leaf name {
                type string;
                description
                    "This object indicates the identifier and is a 
                     text string that is used to identify a logical port. 
                     Unique string values are chosen to uniquely identify
                     the port.

                     Octet values of 0x00 through 0x1f are illegal.
         
                     MEF 26.1 restricts the maximum size identifiers to 
                     45 octets.";
                 reference
                   "[MEF 7.2] 6.2.1.4";
            }
            
            leaf admin-state {
            	type lp-admin-state;
            	default enable;
            	description "Enable or disable this logical-port";
            }
            
            leaf binding {
                type leafref {
                    path "/oc-if:interfaces/oc-if:interface/oc-if:name";
                }
                description
                    "Bind the logical-port to an interface.";
            }
            
            leaf mtu {
                type uint32 {
                    range "64..9216";
                }
                default 1526;
                description
                    "The size in bytes of the maximum transmission unit.";
            }
            
            leaf meter-profile {
                type meter:meter-ref;
                description
                    "A reference to a Meter Profile.";
            }
            
            choice frame-to-cos-policy {
                case map {
                    leaf frame-to-cos-map-policy {
                        type enumeration {
                            enum outer-tag;
                            enum inner-tag;
                            enum dscp;
                            enum outer-mpls-tc;
                        }
                    }
                    
                    leaf frame-to-cos-map {
                        type ftc:frame-to-cos-ref;
                    }
                }
                case fixed {
                    leaf fixed-cos {
                        type uint8 {
                            range "0..63";
                        }
                    }
                    
                    leaf fixed-color {
                        type enumeration {
                            enum green;
                            enum yellow;
                            enum red;
                        }
                    }
                }  
            }

            leaf cos-to-frame-map {
                type ctf:cos-to-frame-ref;
            }

            leaf flood-containment-profile {
                type mef-fc:flood-containment-profile-ref;
            }
            
            leaf description {
                type string;
                description
                      "List of logical ports.";
            }      

            leaf-list outer-tpid {
                 type enumeration {
                     enum tpid-8100;
                     enum tpid-88a8;
                     enum tpid-9100;
                 }
                 description
                     "A list of valid outer-vlan-tag TPIDs for the port.";
            }

            leaf-list inner-tpid {
                 type enumeration {
                     enum tpid-8100;
                     enum tpid-88a8;
                     enum tpid-9100;
                 }
                 description
                     "A list of valid inner-vlan-tag TPIDs for the port.";
            }

            leaf egress-qos {
                type enumeration {
                    enum off;
                    enum on;
                }
            }

            uses pfg-config;

            leaf logical-port-event-type {
               config false;
               type logical-port-event-type;
               description
                  "Description of the logical port interface event types";
            }
        }
    }

    container logical-port-oper-status {
        config false;
	
		list logical-port-status
		{
		      key "name";
	
		      leaf name {
		          type string;
		      }
		
		      leaf index {
		          type uint32;
		      }
	
		      leaf mac-address {
		          type yt:mac-address;
		      }
		
		      leaf oper-state {
		          type lp-oper-state;
			  description "Operational state of this logical port";
		      }
		}
    }

   rpc logical-ports-clear-statistics {
      description "An RPC operation to clear the statistics for one or all Logical-Ports.";

       input {
         choice clear-scope {

            case logical-port {
               leaf logical-port {
                  type mef-logical-port:logical-port-ref;
               }
               description
                  "Clear stats for this logical-port.";
            }

            case all {
               leaf all {
                  type empty;
               }
               description
                  "Clear stats for all logical-ports.";
            }
         }
      }
      output {
         leaf status {
            type string; 
            description 
               "Status of the clear statistics operation.";
         }
      }
   } // end rpc clear-statistics

   notification logical-port-events {
      list logical-port-event {
         leaf logical-port-name {
            type leafref {
               path "/mef-logical-port:logical-ports/mef-logical-port:logical-port/mef-logical-port:name";
            }
            description
              "The logical-port-name for the notification. '*' means any logical-port-name";
         }

         list event-list {
            leaf logical-port-event-type {
               type leafref {
                  path "/mef-logical-port:logical-ports/mef-logical-port:logical-port/mef-logical-port:logical-port-event-type";
               }
               description
                  "The logical-port event-type for the notification. 'any' means any event-type";
            }
         }

         leaf oper-state {
            type leafref {
               path "/mef-logical-port:logical-port-oper-status/mef-logical-port:logical-port-status/mef-logical-port:oper-state";
            }
            description "logical-port operational state change (link state)";
         }
      }
   }
}